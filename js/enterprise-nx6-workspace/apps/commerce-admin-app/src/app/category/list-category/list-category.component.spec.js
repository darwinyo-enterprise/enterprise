"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var testing_1=require("@angular/core/testing"),list_category_component_1=require("./list-category.component"),core_1=require("@angular/core"),http_1=require("@angular/common/http"),store_1=require("@ngxs/store"),file_upload_1=require("@enterprise/material/file-upload"),catalog_lib_1=require("@enterprise/commerce/catalog-lib"),router_1=require("@angular/router"),of_1=require("rxjs/observable/of"),testing_2=require("@angular/router/testing"),category_routing_module_1=require("../category-routing.module"),add_category_component_1=require("../add-category/add-category.component"),edit_category_component_1=require("../edit-category/edit-category.component"),common_1=require("@angular/common"),core_2=require("@enterprise/core"),category_lib_1=require("@enterprise/commerce/category-lib"),category_lib_2=require("@enterprise/commerce/category-lib"),operators_1=require("rxjs/operators"),list_item_actions_1=require("@enterprise/material/list-item-actions");describe("ListCategoryComponent",function(){var e,t,o,r,i;beforeEach(testing_1.async(function(){testing_1.TestBed.configureTestingModule({imports:[http_1.HttpClientModule,testing_2.RouterTestingModule.withRoutes(category_routing_module_1.categoryRoutes),store_1.NgxsModule.forRoot([file_upload_1.FileUploadState,category_lib_1.CategoryState])],declarations:[list_category_component_1.ListCategoryComponent,add_category_component_1.AddCategoryComponent,edit_category_component_1.EditCategoryComponent],schemas:[core_1.NO_ERRORS_SCHEMA],providers:[{provide:catalog_lib_1.CategoryService,useValue:{apiV1CategoryListGet:function(){return of_1.of(category_lib_2.PaginatedCategoriesMock)}}},{provide:router_1.ActivatedRoute,useValue:{params:of_1.of({id:123})}}]}).compileComponents()})),beforeEach(function(){t=testing_1.TestBed.createComponent(list_category_component_1.ListCategoryComponent),e=t.componentInstance,t.detectChanges(),r=testing_1.TestBed.get(router_1.Router),testing_1.TestBed.get(common_1.Location),i=testing_1.TestBed.get(router_1.ActivatedRoute),o=testing_1.TestBed.get(store_1.Store),spyOn(o,"dispatch").and.callFake(function(){}),r.initialNavigation()}),describe("UI Tests",function(){}),describe("Functional Tests",function(){it("should dispatch navigate event to add when addEvent Triggered",function(){e.onAddNewCategory(),expect(o.dispatch).toHaveBeenCalledWith(new core_2.Navigate({extras:{relativeTo:i},commands:["../add"]}))}),it("should dispatch confirm event when deleteEvent triggered",function(){e.onDeleteCategory("1"),expect(o.dispatch).toHaveBeenCalledWith(new core_2.Confirm(e.confirmModel,e.deleteSubject$))}),it("should dispatch delete category event when confirmed event triggered is true",function(){e.onDeleteCategory("1"),e.deleteSubject$.next(!0),expect(o.dispatch).toHaveBeenCalledWith(new category_lib_1.DeleteCategory("1"))}),it("should dispatch fetch first paginated categories when component on init",function(){e.ngOnInit(),expect(o.dispatch).toHaveBeenCalledWith(new category_lib_1.FetchPaginatedCategoriesList({page:0,pageSize:10,maxPage:0,toRow:0,total:0,fromRow:0}))}),it("should dispatch fetch paginated categories when pagination changed",function(){e.onPaginationChanged(),e.pageInfo$.pipe(operators_1.take(1)).subscribe(function(e){expect(o.dispatch).toHaveBeenCalledWith(new category_lib_1.FetchPaginatedCategoriesList(e))}),o.dispatch(new list_item_actions_1.ChangePagination({page:1,pageSize:10,maxPage:0,toRow:0,total:0,fromRow:0}))})})});