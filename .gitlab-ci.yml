image: docker:latest

services:
  - docker:dind

# Use the OverlayFS driver for improved performance.
variables:
  DOCKER_DRIVER: overlay

before_script:
 - apk add --update python py-pip python-dev && pip install docker-compose # install docker-compose
 - docker login -u "darwinyo" -p "science0ismypass"

# enterprise_global_sass_unit_test:
#   stage: test
#   image: node:latest
#   cache:
#     untracked: true
#     paths:
#       - node_modules/
#   script:
#     - chmod +x ./script/sass/test.sh
#     - ./script/sass/test.sh

# commerce_library_unit_test:
#   stage: test
#   image: microsoft/aspnetcore-build:2.0
#   cache:
#     untracked: true
#     paths:
#       - bin/
#   script:
#     - cd ./net/tests/Enterprise.Library.EventBus.Tests
#     - dotnet restore ./Enterprise.Library.EventBus.Tests.csproj
#     - dotnet build ./Enterprise.Library.EventBus.Tests.csproj
#     - dotnet test ./Enterprise.Library.EventBus.Tests.csproj

# commerce_catalog_unit_test:
#   stage: test
#   image: microsoft/aspnetcore-build:2.0
#   cache:
#     untracked: true
#     paths:
#     - bin/
#   script:
#     - cd ./net/tests/Enterprise.Commerce.Tests
#     - dotnet restore ./Enterprise.Commerce.Tests.csproj
#     - dotnet build ./Enterprise.Commerce.Tests.csproj
#     - dotnet test ./Enterprise.Commerce.Tests.csproj

# commerce_frontend_unit_test:
#   stage: test
#   image: node:latest
#   cache:
#     untracked: true
#     paths:
#     - node_modules/
#   script:
#     - cd ./js/enterprise-nx6-workspace
#     - npm install
#     - npm run test:all

# commerce_catalog_integration_test:
#   stage: test
#   image: "$CI_REGISTRY_IMAGE/aspnetcore-ci:v1"
#   cache:
#     untracked: true
#     paths:
#       - bin/
#   script:
#     - cd ./net
#     - docker-compose -f docker-compose-ci.yml -f docker-compose-ci.override.yml up --abort-on-container-exit
    

commerce_frontend_build:
  stage: build
  script:
    - cd ./net
    - docker-compose -f docker-compose.yml -f docker-compose.override.yml build
    - docker images

    - docker push "darwinyo/order.api"
    - docker push "darwinyo/catalog.api"
    - docker push "darwinyo/basket.api"
    - docker push "darwinyo/identity.api"
    - docker push "darwinyo/order.backgroundtasks"
    - docker push "darwinyo/order.signalrhub"
    - docker push "darwinyo/commerce.client"
    - docker push "darwinyo/payment.api"
    - docker push "darwinyo/commerce.admin"
    - docker push "darwinyo/webstatus"

    # - docker image tag darwinyo/order.api "$CI_REGISTRY_IMAGE/order.api"
    # - docker image tag darwinyo/catalog.api "$CI_REGISTRY_IMAGE/catalog.api"
    # - docker image tag darwinyo/basket.api "$CI_REGISTRY_IMAGE/basket.api"
    # - docker image tag darwinyo/identity.api "$CI_REGISTRY_IMAGE/identity.api"
    # - docker image tag darwinyo/order.backgroundtasks "$CI_REGISTRY_IMAGE/order.backgroundtasks"
    # - docker image tag darwinyo/order.signalrhub "$CI_REGISTRY_IMAGE/order.signalrhub"
    # - docker image tag darwinyo/commerce.client "$CI_REGISTRY_IMAGE/commerce.client"
    # - docker image tag darwinyo/payment.api "$CI_REGISTRY_IMAGE/payment.api"
    # - docker image tag darwinyo/commerce.admin "$CI_REGISTRY_IMAGE/commerce.admin"
    # - docker image tag darwinyo/webstatus "$CI_REGISTRY_IMAGE/webstatus"

    # - docker push "$CI_REGISTRY_IMAGE/order.api"
    # - docker push "$CI_REGISTRY_IMAGE/catalog.api"
    # - docker push "$CI_REGISTRY_IMAGE/basket.api"
    # - docker push "$CI_REGISTRY_IMAGE/identity.api"
    # - docker push "$CI_REGISTRY_IMAGE/order.backgroundtasks"
    # - docker push "$CI_REGISTRY_IMAGE/order.signalrhub"
    # - docker push "$CI_REGISTRY_IMAGE/commerce.client"
    # - docker push "$CI_REGISTRY_IMAGE/payment.api"
    # - docker push "$CI_REGISTRY_IMAGE/commerce.admin"
    # - docker push "$CI_REGISTRY_IMAGE/webstatus"
    



# commerce_build_ci_images:
#   stage: build
#   script:
#     - cd ./images/aspnetcore-build-ci
#     - docker build -t "$CI_REGISTRY_IMAGE/aspnetcore-ci:v1" .
#     - docker push "$CI_REGISTRY_IMAGE/aspnetcore-ci:v1"